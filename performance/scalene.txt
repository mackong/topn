                                                               Memory usage: ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ (max:  18.00MB)                                                               
                                                                topn.py: % of time = 100.00% out of  33.45s.                                                                
       ╷       ╷        ╷    ╷       ╷      ╷              ╷       ╷                                                                                                        
  Line │Time % │Time %  │Sys │Mem %  │Net   │Memory usage  │Copy   │                                                                                                        
       │Python │native  │%   │Python │(MB)  │over time / % │(MB/s) │topn.py                                                                                                 
╺━━━━━━┿━━━━━━━┿━━━━━━━━┿━━━━┿━━━━━━━┿━━━━━━┿━━━━━━━━━━━━━━┿━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸
     1 │       │        │    │       │      │              │       │import fileinput                                                                                        
     2 │       │        │    │       │      │              │       │import mmap                                                                                             
     3 │       │        │    │       │      │              │       │import os                                                                                               
     4 │       │        │    │       │      │              │       │import sys                                                                                              
     5 │       │        │    │       │      │              │       │import tempfile                                                                                         
     6 │       │        │    │       │      │              │       │import timeit                                                                                           
     7 │       │        │    │       │      │              │       │from collections import Counter                                                                         
     8 │       │        │    │       │      │              │       │from typing import Dict, List, Tuple                                                                    
     9 │       │        │    │       │      │              │       │                                                                                                        
    10 │       │        │    │       │      │              │       │                                                                                                        
    11 │       │        │    │       │      │              │       │def split(input_file: str, split_filenames: List[str]) -> None:                                         
    12 │       │        │    │       │      │              │       │    """Split input file into `small` files based on modular of hash value."""                           
    13 │       │        │    │       │      │              │       │    nsplit = len(split_filenames)                                                                       
    14 │       │        │    │  100% │    6 │▁▁▁▁▁▁▁▁      │       │    split_files = [open(fname, 'wb') for fname in split_filenames]                                      
    15 │       │        │    │       │      │              │       │                                                                                                        
    16 │       │        │    │       │      │              │       │    with open(input_file) as f:                                                                         
    17 │       │        │    │       │      │              │       │        with mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_READ) as mm:                            
    18 │    7% │        │    │  100% │ 2283 │▁▁▁▁▁▁▁       │    35 │            for line in iter(mm.readline, b''):                                                         
    19 │   30% │     1% │    │  100% │-1561 │▁▁▁▁▁         │       │                findex = hash(line) % nsplit                                                            
    20 │   21% │        │    │  100% │ -893 │▁▁▁▁▁▁▁       │    31 │                split_files[findex].write(line)                                                         
    21 │       │        │    │       │      │              │       │                                                                                                        
    22 │       │        │    │       │   -6 │              │       │    [f.close() for f in split_files]                                                                    
    23 │       │        │    │       │      │              │       │                                                                                                        
    24 │       │        │    │       │      │              │       │                                                                                                        
    25 │       │        │    │       │      │              │       │def count_urls(input_file: str, n: int = 100) -> List[Tuple[str, int]]:                                 
    26 │       │        │    │       │      │              │       │    """Count the occurrences of urls in input_file.                                                     
    27 │       │        │    │       │      │              │       │                                                                                                        
    28 │       │        │    │       │      │              │       │    Returns the topn occurrences of urls in descending order.                                           
    29 │       │        │    │       │      │              │       │    """                                                                                                 
    30 │       │        │    │       │      │              │       │    c = Counter()                                                                                       
    31 │       │        │    │  100% │    5 │▁▁▁▁▁         │       │    with open(input_file) as f:                                                                         
    32 │   10% │     1% │    │  100% │ 2690 │▁▁▁▁▁▁▁▁      │    33 │        for line in f:                                                                                  
    33 │   28% │     1% │    │  100% │-2643 │▁▁▁▁▁         │    24 │            c[line] += 1                                                                                
    34 │    1% │        │    │  100% │  -13 │▁▁▁▁▁▁▁▁▁     │       │        return c.most_common(n)                                                                         
    35 │       │        │    │       │      │              │       │                                                                                                        
    36 │       │        │    │       │      │              │       │                                                                                                        
    37 │       │        │    │       │      │              │       │def topn(input_file: str, n: int = 100) -> None:                                                        
    38 │       │        │    │       │      │              │       │    """Print the topn occurrences of urls in input file."""                                             
    39 │       │        │    │       │      │              │       │    split_prefix = 'split'                                                                              
    40 │       │        │    │       │      │              │       │                                                                                                        
    41 │       │        │    │       │      │              │       │    # A prime number may make the distribution more uniform.                                            
    42 │       │        │    │       │      │              │       │    # NOTE: if greater than 1024, we may need to change the limitation of open files.                   
    43 │       │        │    │       │      │              │       │    nsplit = 1009                                                                                       
    44 │       │        │    │       │      │              │       │                                                                                                        
    45 │       │        │    │       │      │              │       │    with tempfile.TemporaryDirectory(prefix='topn') as work_dir:                                        
    46 │       │        │    │  100% │    3 │▁▁▁▁▁         │       │        split_filenames = [os.path.join(work_dir, '{}.{}'.format(split_prefix, i+1)) for i in range(…   
    47 │       │        │    │       │      │              │       │                                                                                                        
    48 │       │        │    │       │      │              │       │        split(input_file, split_filenames)                                                              
    49 │       │        │    │       │      │              │       │                                                                                                        
    50 │       │        │    │       │      │              │       │        url_counter = Counter()                                                                         
    51 │       │        │    │       │      │              │       │        for split_fname in split_filenames:                                                             
    52 │       │        │    │  100% │   10 │▁▁▁▁▁▁▁▁▁     │       │            url_counter.update(dict(count_urls(split_fname, n)))                                        
    53 │       │        │    │       │      │              │       │                                                                                                        
    54 │       │        │    │  100% │    1 │▁             │       │        top10n = url_counter.most_common(n * 10)                                                        
    55 │       │        │    │       │      │              │       │        least_count = 0                                                                                 
    56 │       │        │    │       │      │              │       │        for url, count in top10n[:n]:                                                                   
    57 │       │        │    │       │      │              │       │            print(count, url.strip())                                                                   
    58 │       │        │    │       │      │              │       │            least_count = count                                                                         
    59 │       │        │    │       │      │              │       │                                                                                                        
    60 │       │        │    │       │      │              │       │        for url, count in top10n[n:]:                                                                   
    61 │       │        │    │       │      │              │       │            if count != least_count:                                                                    
    62 │       │        │    │       │      │              │       │                break                                                                                   
    63 │       │        │    │       │      │              │       │            print(count, url.strip())                                                                   
    64 │       │        │    │       │      │              │       │        else:                                                                                           
    65 │       │        │    │       │      │              │       │            # There are more than (nsplit-1)*n duplicate occurrences.                                   
    66 │       │        │    │       │      │              │       │            # Now just a WARNING.                                                                       
    67 │       │        │    │       │      │              │       │            # TODO: We may need to recalculate from count files.                                        
    68 │       │        │    │  100% │    1 │▁             │       │            print('WARNING: there are too many duplicate occurrences')                                  
    69 │       │        │    │       │      │              │       │                                                                                                        
    70 │       │        │    │       │      │              │       │                                                                                                        
    71 │       │        │    │       │      │              │       │if __name__ == '__main__':                                                                              
    72 │       │        │    │       │      │              │       │    start = timeit.default_timer()                                                                      
    73 │       │        │    │       │      │              │       │                                                                                                        
    74 │       │        │    │       │      │              │       │    input_file = sys.argv[1] if len(sys.argv) == 2 else 'urls.base.txt'                                 
    75 │       │        │    │       │      │              │       │    print('Calculate topn for {}'.format(input_file))                                                   
    76 │       │        │    │       │      │              │       │    topn(input_file)                                                                                    
    77 │       │        │    │       │      │              │       │                                                                                                        
    78 │       │        │    │       │      │              │       │    print('\ntime ellapsed: {} seconds.'.format(timeit.default_timer() - start))                        
       ╵       ╵        ╵    ╵       ╵      ╵              ╵       ╵                                                                                                        
